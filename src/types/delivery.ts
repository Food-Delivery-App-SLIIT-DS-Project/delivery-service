// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.31.0
// source: proto/delivery.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "delivery";

export interface Empty2 {
}

export interface Delivery {
  deliveryId: string;
  orderId: string;
  address: string;
  trackingId: string;
  status: string;
  createdAt: string;
  updatedAt: string;
}

export interface CreateDeliveryDto {
  orderId: string;
  address: string;
  trackingId: string;
  status: string;
  createdAt: string;
  updatedAt: string;
}

export interface DeliveryList {
  deliveries: Delivery[];
}

export interface FindOneDeliveryDto {
  deliveryId: string;
}

export interface UpdateDeliveryStatusDto {
  deliveryId: string;
  status: string;
}

export const DELIVERY_PACKAGE_NAME = "delivery";

export interface DeliveryServiceClient {
  /** delivery assignment management */

  createDelivery(request: CreateDeliveryDto): Observable<Delivery>;

  findAllDeliveries(request: Empty2): Observable<DeliveryList>;

  findDeliveryById(request: FindOneDeliveryDto): Observable<Delivery>;

  updateDeliveryStatus(request: UpdateDeliveryStatusDto): Observable<Delivery>;
}

export interface DeliveryServiceController {
  /** delivery assignment management */

  createDelivery(request: CreateDeliveryDto): Promise<Delivery> | Observable<Delivery> | Delivery;

  findAllDeliveries(request: Empty2): Promise<DeliveryList> | Observable<DeliveryList> | DeliveryList;

  findDeliveryById(request: FindOneDeliveryDto): Promise<Delivery> | Observable<Delivery> | Delivery;

  updateDeliveryStatus(request: UpdateDeliveryStatusDto): Promise<Delivery> | Observable<Delivery> | Delivery;
}

export function DeliveryServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createDelivery", "findAllDeliveries", "findDeliveryById", "updateDeliveryStatus"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("DeliveryService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("DeliveryService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DELIVERY_SERVICE_NAME = "DeliveryService";
