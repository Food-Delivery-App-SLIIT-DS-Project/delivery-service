// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/delivery.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "delivery";

export interface OnlineStatusRequest {
  userId: string;
  lat: number;
  lng: number;
}

export interface OfflineStatusRequest {
  userId: string;
}

export interface UpdateLocationRequest {
  userId: string;
  lat: number;
  lng: number;
}

export interface GetNearestRequest {
  lat: number;
  lng: number;
  radius: number;
}

export interface DeliveryStatusResponse {
  userId: string;
  isOnline: boolean;
  message: string;
}

export interface NearestDelivery {
  userId: string;
  lat: number;
  lng: number;
}

export interface NearestDeliveryList {
  list: NearestDelivery[];
}

export const DELIVERY_PACKAGE_NAME = "delivery";

export interface DeliveryServiceClient {
  goOnline(request: OnlineStatusRequest): Observable<DeliveryStatusResponse>;

  goOffline(request: OfflineStatusRequest): Observable<DeliveryStatusResponse>;

  updateLocation(request: UpdateLocationRequest): Observable<DeliveryStatusResponse>;

  getNearest(request: GetNearestRequest): Observable<NearestDeliveryList>;
}

export interface DeliveryServiceController {
  goOnline(
    request: OnlineStatusRequest,
  ): Promise<DeliveryStatusResponse> | Observable<DeliveryStatusResponse> | DeliveryStatusResponse;

  goOffline(
    request: OfflineStatusRequest,
  ): Promise<DeliveryStatusResponse> | Observable<DeliveryStatusResponse> | DeliveryStatusResponse;

  updateLocation(
    request: UpdateLocationRequest,
  ): Promise<DeliveryStatusResponse> | Observable<DeliveryStatusResponse> | DeliveryStatusResponse;

  getNearest(
    request: GetNearestRequest,
  ): Promise<NearestDeliveryList> | Observable<NearestDeliveryList> | NearestDeliveryList;
}

export function DeliveryServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["goOnline", "goOffline", "updateLocation", "getNearest"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("DeliveryService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("DeliveryService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DELIVERY_SERVICE_NAME = "DeliveryService";
