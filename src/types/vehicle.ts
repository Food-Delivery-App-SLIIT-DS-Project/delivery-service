// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/vehicle.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'vehicle';

export interface Empty2 {}

export interface Vehicle {
  vehicleId: string;
  driverId: string;
  vehicleType: string;
  brandName: string;
  modelName: string;
  registrationNumber: string;
  color: string;
  year: number;
  insuranceNumber: string;
  insuranceExpiry: string;
  availability: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface CreateVehicleDto {
  driverId: string;
  vehicleType: string;
  brandName: string;
  modelName: string;
  registrationNumber: string;
  color: string;
  year: number;
  insuranceNumber: string;
  insuranceExpiry: string;
}

export interface VehicleList {
  vehicles: Vehicle[];
}

export interface FindVehicleByDriverIdDto {
  driverId: string;
}

export interface FindOneVehicleDto {
  vehicleId: string;
}

export interface UpdateVehicleAvailabilityDto {
  vehicleId: string;
  availability: boolean;
}

export interface VehicleLocation {
  trackingId: string;
  vehicleId: string;
  latitude: number;
  longitude: number;
  updatedAt: string;
}

export interface VehicleLocationList {
  vehicleLocations: VehicleLocation[];
}

export const VEHICLE_PACKAGE_NAME = 'vehicle';

export interface VehicleServiceClient {
  /** delivery vechile management */

  createVehicle(request: CreateVehicleDto): Observable<Vehicle>;

  findVehicleById(request: FindOneVehicleDto): Observable<Vehicle>;

  findAllVehicles(request: Empty2): Observable<VehicleList>;

  deleteVehicle(request: FindOneVehicleDto): Observable<Vehicle>;

  findVehicleByDriverId(request: FindVehicleByDriverIdDto): Observable<Vehicle>;

  /** find available vehicles */

  findAvailableVehicles(request: Empty2): Observable<VehicleList>;

  updateVehicleAvailability(
    request: UpdateVehicleAvailabilityDto,
  ): Observable<Vehicle>;

  /** vehicle location */

  updateVehicleLocation(request: VehicleLocation): Observable<VehicleLocation>;

  findVehicleLocation(request: FindOneVehicleDto): Observable<VehicleLocation>;

  findAllVehicleLocations(request: Empty2): Observable<VehicleLocation>;

  deleteVehicleLocation(
    request: FindOneVehicleDto,
  ): Observable<VehicleLocation>;
}

export interface VehicleServiceController {
  /** delivery vechile management */

  createVehicle(
    request: CreateVehicleDto,
  ): Promise<Vehicle> | Observable<Vehicle> | Vehicle;

  findVehicleById(
    request: FindOneVehicleDto,
  ): Promise<Vehicle> | Observable<Vehicle> | Vehicle;

  findAllVehicles(
    request: Empty2,
  ): Promise<VehicleList> | Observable<VehicleList> | VehicleList;

  deleteVehicle(
    request: FindOneVehicleDto,
  ): Promise<Vehicle> | Observable<Vehicle> | Vehicle;

  findVehicleByDriverId(
    request: FindVehicleByDriverIdDto,
  ): Promise<Vehicle> | Observable<Vehicle> | Vehicle;

  /** find available vehicles */

  findAvailableVehicles(
    request: Empty2,
  ): Promise<VehicleList> | Observable<VehicleList> | VehicleList;

  updateVehicleAvailability(
    request: UpdateVehicleAvailabilityDto,
  ): Promise<Vehicle> | Observable<Vehicle> | Vehicle;

  /** vehicle location */

  updateVehicleLocation(
    request: VehicleLocation,
  ): Promise<VehicleLocation> | Observable<VehicleLocation> | VehicleLocation;

  findVehicleLocation(
    request: FindOneVehicleDto,
  ): Promise<VehicleLocation> | Observable<VehicleLocation> | VehicleLocation;

  findAllVehicleLocations(
    request: Empty2,
  ): Promise<VehicleLocation> | Observable<VehicleLocation> | VehicleLocation;

  deleteVehicleLocation(
    request: FindOneVehicleDto,
  ): Promise<VehicleLocation> | Observable<VehicleLocation> | VehicleLocation;
}

export function VehicleServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createVehicle',
      'findVehicleById',
      'findAllVehicles',
      'deleteVehicle',
      'findVehicleByDriverId',
      'findAvailableVehicles',
      'updateVehicleAvailability',
      'updateVehicleLocation',
      'findVehicleLocation',
      'findAllVehicleLocations',
      'deleteVehicleLocation',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('VehicleService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('VehicleService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const VEHICLE_SERVICE_NAME = 'VehicleService';
